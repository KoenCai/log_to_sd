<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nrf52840_qiaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nrf52840_qiaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Apr 12 14:34:39 2022
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
spi_handler &rArr; sdc_pt_identification &rArr; sdc_pt_sub_data_read &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[80]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[9a]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from nrfx_rtc.o(i.RTC0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_spim.o(.constdata)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler__</a> from uarte.o(i.UARTE0_UART0_IRQHandler__) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[3b]">block_dev_handler</a> from diskio_blkdev.o(i.block_dev_handler) referenced from diskio_blkdev.o(i.disk_initialize)
 <LI><a href="#[45]">block_dev_sdc_geometry</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_geometry) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[40]">block_dev_sdc_init</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_init) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[44]">block_dev_sdc_ioctl</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_ioctl) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[42]">block_dev_sdc_read_req</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_read_req) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[41]">block_dev_sdc_uninit</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_uninit) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[43]">block_dev_sdc_write_req</a> from nrf_block_dev_sdc.o(i.block_dev_sdc_write_req) referenced from nrf_block_dev_sdc.o(.constdata)
 <LI><a href="#[3c]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[3a]">default_wait_func</a> from diskio_blkdev.o(i.default_wait_func) referenced from diskio_blkdev.o(i.disk_initialize)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[47]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[46]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[3f]">rtc_handler</a> from rtc.o(i.rtc_handler) referenced from rtc.o(i.rtc_config)
 <LI><a href="#[39]">sdc_handler</a> from nrf_block_dev_sdc.o(i.sdc_handler) referenced from nrf_block_dev_sdc.o(i.block_dev_sdc_init)
 <LI><a href="#[3e]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[38]">spi_handler</a> from app_sdcard.o(i.spi_handler) referenced from app_sdcard.o(i.app_sdc_init)
 <LI><a href="#[3d]">spim_evt_handler</a> from nrf_drv_spi.o(i.spim_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[146]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[147]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[148]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[f1]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[f2]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[f0]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[14c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[ef]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[f4]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[14d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[14e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler__
</UL>

<P><STRONG><a name="[119]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_creat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a9]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
</UL>

<P><STRONG><a name="[144]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[81]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[154]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[155]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>KEY1_Down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key.o(i.KEY1_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY1_Down &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>KEY2_Down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key.o(i.KEY2_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY2_Down &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>KEY_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY_Init &rArr; nrf_gpio_cfg_input
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>LED1_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED1_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED1_Close &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[5a]"></a>LED1_Open</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED1_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED1_Open &rArr; nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
</UL>

<P><STRONG><a name="[5c]"></a>LED1_blink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.LED1_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED1_blink &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
</UL>

<P><STRONG><a name="[5f]"></a>LED4_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED4_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED4_Close &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[60]"></a>LED4_Toggle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED4_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED4_Toggle &rArr; nrf_gpio_pin_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UarteWirteToSD
</UL>

<P><STRONG><a name="[61]"></a>LED5_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED5_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED5_Close &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuff
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[62]"></a>LED5_Open</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.LED5_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED5_Open &rArr; nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuff
</UL>

<P><STRONG><a name="[63]"></a>LED_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_Init &rArr; nrf_gpio_cfg_output
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED5_Close
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Close
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Close
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.RTC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC0_IRQHandler &rArr; irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[6b]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_98
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_120
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_115
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_103
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler__</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, uarte.o(i.UARTE0_UART0_IRQHandler__))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTE0_UART0_IRQHandler__ &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write_byte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>WirteToSD</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sdcardrw.o(i.WirteToSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = WirteToSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UarteWirteToSD
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[158]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[159]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[83]"></a>app_error_fault_handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[86]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_identification
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_read
</UL>

<P><STRONG><a name="[87]"></a>app_sdc_block_read</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, app_sdcard.o(i.app_sdc_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = app_sdc_block_read &rArr; sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_read_req
</UL>

<P><STRONG><a name="[89]"></a>app_sdc_block_write</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, app_sdcard.o(i.app_sdc_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_sdc_block_write &rArr; sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_write_req
</UL>

<P><STRONG><a name="[96]"></a>app_sdc_busy_check</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_sdcard.o(i.app_sdc_busy_check))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_wait
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_write_req
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_uninit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_read_req
</UL>

<P><STRONG><a name="[13b]"></a>app_sdc_info_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_sdcard.o(i.app_sdc_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_handler
</UL>

<P><STRONG><a name="[8a]"></a>app_sdc_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, app_sdcard.o(i.app_sdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_sdc_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_init
</UL>

<P><STRONG><a name="[8f]"></a>app_sdc_uninit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_sdcard.o(i.app_sdc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_sdc_uninit &rArr; nrfx_spim_uninit &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_uninit
</UL>

<P><STRONG><a name="[91]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_enter_critical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[93]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_exit_critical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[92]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[94]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[113]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[a8]"></a>create_newfile</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sdcardrw.o(i.create_newfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = create_newfile &rArr; logName_plus &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>disk_initialize</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, diskio_blkdev.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[b6]"></a>disk_ioctl</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, diskio_blkdev.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_ioctl &rArr; nrf_blk_dev_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_blk_dev_ioctl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_blk_dev_geometry
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[be]"></a>disk_read</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, diskio_blkdev.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[cf]"></a>disk_status</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, diskio_blkdev.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[bd]"></a>disk_write</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, diskio_blkdev.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[cc]"></a>diskio_blockdev_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diskio_blkdev.o(i.diskio_blockdev_register))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
</UL>

<P><STRONG><a name="[bb]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
</UL>

<P><STRONG><a name="[7c]"></a>f_lseek</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
</UL>

<P><STRONG><a name="[bf]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
</UL>

<P><STRONG><a name="[7b]"></a>f_open</STRONG> (Thumb, 492 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
</UL>

<P><STRONG><a name="[c7]"></a>f_read</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
</UL>

<P><STRONG><a name="[7e]"></a>f_sync</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
</UL>

<P><STRONG><a name="[ca]"></a>f_unlink</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
</UL>

<P><STRONG><a name="[7d]"></a>f_write</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logName_plus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
</UL>

<P><STRONG><a name="[cb]"></a>fatfs_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, sdcardrw.o(i.fatfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fatfs_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diskio_blockdev_register
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_blink
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>fatfs_readconfig</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, sdcardrw.o(i.fatfs_readconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fatfs_readconfig &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>lfclk_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtc.o(i.lfclk_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lfclk_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>logName_plus</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, sdcardrw.o(i.logName_plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = logName_plus &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; create_newfile &rArr; logName_plus &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartE_DMA_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_creat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuff
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Down
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Down
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UarteWirteToSD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e4]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[e2]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[98]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[ed]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[ba]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[ee]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[f3]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[f5]"></a>nrf_balloc_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[f7]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[11f]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[dd]"></a>nrf_drv_clock_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
</UL>

<P><STRONG><a name="[de]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_config
</UL>

<P><STRONG><a name="[8d]"></a>nrf_drv_spi_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
</UL>

<P><STRONG><a name="[100]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[9b]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[101]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[109]"></a>nrf_log_backend_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_id_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[10b]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[10c]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[130]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[e1]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[80]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 748 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[85]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[7f]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readconfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_newfile
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
</UL>

<P><STRONG><a name="[117]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_data
</UL>

<P><STRONG><a name="[111]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[e0]"></a>nrf_log_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[ec]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[11d]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[84]"></a>nrf_log_panic</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[110]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[114]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[11e]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[10d]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[11b]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[112]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[10f]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[115]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[11c]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[fa]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[f9]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[fd]"></a>nrfx_clock_lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[124]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[126]"></a>nrfx_prs_release</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[127]"></a>nrfx_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrfx_rtc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rtc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[138]"></a>nrfx_rtc_init</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, nrfx_rtc.o(i.nrfx_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[129]"></a>nrfx_rtc_overflow_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(i.nrfx_rtc_overflow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_rtc_overflow_enable &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[fe]"></a>nrfx_spim_init</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[90]"></a>nrfx_spim_uninit</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nrfx_spim.o(i.nrfx_spim_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_spim_uninit &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_uninit
</UL>

<P><STRONG><a name="[ff]"></a>nrfx_spim_xfer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[e9]"></a>printf_data</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdcardrw.o(i.printf_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = printf_data &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>readbuff</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uarte.o(i.readbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = readbuff &rArr; ring_buffer_read_byte &rArr; ring_buffer_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get_length
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED5_Open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED5_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>ring_buffer_creat</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ring_buffer.o(i.ring_buffer_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_buffer_creat
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_creat
</UL>

<P><STRONG><a name="[132]"></a>ring_buffer_get_length</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ring_buffer.o(i.ring_buffer_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ring_buffer_get_length &rArr; ring_buffer_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuff
</UL>

<P><STRONG><a name="[133]"></a>ring_buffer_read_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ring_buffer.o(i.ring_buffer_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ring_buffer_read_byte &rArr; ring_buffer_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_self_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbuff
</UL>

<P><STRONG><a name="[78]"></a>ring_buffer_write_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ring_buffer.o(i.ring_buffer_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ring_buffer_write_byte &rArr; ring_buffer_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_self_add
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler__
</UL>

<P><STRONG><a name="[e7]"></a>ringbuffer_creat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uarte.o(i.ringbuffer_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ringbuffer_creat &rArr; ring_buffer_creat
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>rtc_config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rtc.o(i.rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtc_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>uartE_DMA_Init</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, uarte.o(i.uartE_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uartE_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>UarteWirteToSD</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.UarteWirteToSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UarteWirteToSD &rArr; WirteToSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WirteToSD
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>log_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = log_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>ring_buffer_enter_critical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ring_buffer.o(i.ring_buffer_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ring_buffer_enter_critical &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get_length
</UL>

<P><STRONG><a name="[136]"></a>ring_buffer_exit_critical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ring_buffer.o(i.ring_buffer_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ring_buffer_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read_byte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get_length
</UL>

<P><STRONG><a name="[137]"></a>ring_buffer_self_add</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_self_add))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read_byte
</UL>

<P><STRONG><a name="[139]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[3f]"></a>rtc_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(i.rtc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rtc_config)
</UL>
<P><STRONG><a name="[5e]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, led.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_blink
</UL>

<P><STRONG><a name="[64]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, led.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg_output
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[5b]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED5_Open
</UL>

<P><STRONG><a name="[107]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[59]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED5_Close
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Close
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Close
</UL>

<P><STRONG><a name="[5d]"></a>nrf_gpio_pin_toggle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.nrf_gpio_pin_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_blink
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Toggle
</UL>

<P><STRONG><a name="[54]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, key.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Down
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Down
</UL>

<P><STRONG><a name="[57]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, key.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg_input
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[106]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, key.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[53]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, key.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Down
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Down
</UL>

<P><STRONG><a name="[9c]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[a7]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[b1]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[a2]"></a>create_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[a5]"></a>create_name</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ab]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[ae]"></a>dir_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ad]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[b2]"></a>dir_read</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[b3]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b5]"></a>dir_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dir_remove &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[ac]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[c1]"></a>find_volume</STRONG> (Thumb, 744 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[c2]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a3]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[c0]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[c4]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[9f]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[9e]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[af]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[b4]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a6]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[9d]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[a4]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[c6]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[c5]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[c3]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[c8]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[c9]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[b0]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[bc]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3b]"></a>block_dev_handler</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, diskio_blkdev.o(i.block_dev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = block_dev_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio_blkdev.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[3a]"></a>default_wait_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio_blkdev.o(i.default_wait_func))
<BR>[Address Reference Count : 1]<UL><LI> diskio_blkdev.o(i.disk_initialize)
</UL>
<P><STRONG><a name="[b8]"></a>nrf_blk_dev_geometry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio_blkdev.o(i.nrf_blk_dev_geometry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_blk_dev_geometry
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[b7]"></a>nrf_blk_dev_ioctl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, diskio_blkdev.o(i.nrf_blk_dev_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_blk_dev_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[125]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[3d]"></a>spim_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[d0]"></a>finish_transfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_spim.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[6f]"></a>irq_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[108]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[d1]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[104]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d2]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[d5]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[d6]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_spim.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[12d]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[12e]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[142]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[12f]"></a>spim_xfer</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[a0]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[3c]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[a1]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[fc]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[fb]"></a>nrf_wdt_started</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[65]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[67]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[122]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_start
</UL>

<P><STRONG><a name="[123]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[120]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[68]"></a>irq_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_rtc.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_is_enabled
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_pending
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[d9]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[12a]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[d8]"></a>nrf_rtc_event_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_pending))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[da]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[12b]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
</UL>

<P><STRONG><a name="[d7]"></a>nrf_rtc_int_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[128]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>

<P><STRONG><a name="[9a]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[d3]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[102]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[d4]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[ea]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[f8]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[f6]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[8e]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, app_sdcard.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
</UL>

<P><STRONG><a name="[8b]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, app_sdcard.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_uninit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
</UL>

<P><STRONG><a name="[105]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_sdcard.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[8c]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_sdcard.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
</UL>

<P><STRONG><a name="[13e]"></a>sdc_calculate_size</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_sdcard.o(i.sdc_calculate_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdc_calculate_size
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_identification
</UL>

<P><STRONG><a name="[88]"></a>sdc_cmd</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, app_sdcard.o(i.sdc_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_identification
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_read
</UL>

<P><STRONG><a name="[13c]"></a>sdc_pt_identification</STRONG> (Thumb, 1256 bytes, Stack size 48 bytes, app_sdcard.o(i.sdc_pt_identification))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sdc_pt_identification &rArr; sdc_pt_sub_data_read &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_sub_data_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_calculate_size
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
</UL>

<P><STRONG><a name="[13f]"></a>sdc_pt_read</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, app_sdcard.o(i.sdc_pt_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sdc_pt_read &rArr; sdc_pt_sub_data_read &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_sub_data_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
</UL>

<P><STRONG><a name="[13d]"></a>sdc_pt_sub_data_read</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, app_sdcard.o(i.sdc_pt_sub_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sdc_pt_sub_data_read &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_identification
</UL>

<P><STRONG><a name="[140]"></a>sdc_pt_write</STRONG> (Thumb, 868 bytes, Stack size 32 bytes, app_sdcard.o(i.sdc_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sdc_pt_write &rArr; sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
</UL>

<P><STRONG><a name="[13a]"></a>sdc_spi_transfer</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, app_sdcard.o(i.sdc_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_sub_data_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_cmd
</UL>

<P><STRONG><a name="[38]"></a>spi_handler</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, app_sdcard.o(i.spi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = spi_handler &rArr; sdc_pt_identification &rArr; sdc_pt_sub_data_read &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_spi_transfer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_pt_identification
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sdcard.o(i.app_sdc_init)
</UL>
<P><STRONG><a name="[45]"></a>block_dev_sdc_geometry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_geometry))
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>block_dev_sdc_init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = block_dev_sdc_init &rArr; app_sdc_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_wait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>block_dev_sdc_ioctl</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = block_dev_sdc_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>block_dev_sdc_read_req</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_read_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = block_dev_sdc_read_req &rArr; app_sdc_block_read &rArr; sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_wait
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_busy_check
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>block_dev_sdc_uninit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = block_dev_sdc_uninit &rArr; app_sdc_uninit &rArr; nrfx_spim_uninit &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_uninit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_busy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>block_dev_sdc_write_req</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nrf_block_dev_sdc.o(i.block_dev_sdc_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = block_dev_sdc_write_req &rArr; app_sdc_block_write &rArr; sdc_cmd &rArr; sdc_spi_transfer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_wait
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_busy_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_block_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>sdc_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrf_block_dev_sdc.o(i.sdc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sdc_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_uninit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_info_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_block_dev_sdc.o(i.block_dev_sdc_init)
</UL>
<P><STRONG><a name="[95]"></a>sdc_wait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_block_dev_sdc.o(i.sdc_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdc_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_func
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sdc_busy_check
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_write_req
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_read_req
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_dev_sdc_init
</UL>

<P><STRONG><a name="[141]"></a>wait_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_block_dev_sdc.o(i.wait_func))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdc_wait
</UL>

<P><STRONG><a name="[48]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[10a]"></a>backend_id_assign</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.backend_id_assign))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[97]"></a>buf_prealloc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[b9]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[e3]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[99]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[eb]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[143]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[116]"></a>std_n</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[11a]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[118]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[131]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[6a]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[6c]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6e]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6d]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[73]"></a>nrf52_errata_103</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[74]"></a>nrf52_errata_115</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[75]"></a>nrf52_errata_120</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[76]"></a>nrf52_errata_136</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[70]"></a>nrf52_errata_36</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[71]"></a>nrf52_errata_66</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[72]"></a>nrf52_errata_98</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_nrf52840.o(i.nrf52_errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
